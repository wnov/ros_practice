// Generated by gencpp from file july_msgs/JulyIntMsg.msg
// DO NOT EDIT!


#ifndef JULY_MSGS_MESSAGE_JULYINTMSG_H
#define JULY_MSGS_MESSAGE_JULYINTMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace july_msgs
{
template <class ContainerAllocator>
struct JulyIntMsg_
{
  typedef JulyIntMsg_<ContainerAllocator> Type;

  JulyIntMsg_()
    : msg_a(0)
    , msg_b(0)  {
    }
  JulyIntMsg_(const ContainerAllocator& _alloc)
    : msg_a(0)
    , msg_b(0)  {
  (void)_alloc;
    }



   typedef int32_t _msg_a_type;
  _msg_a_type msg_a;

   typedef int32_t _msg_b_type;
  _msg_b_type msg_b;





  typedef boost::shared_ptr< ::july_msgs::JulyIntMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::july_msgs::JulyIntMsg_<ContainerAllocator> const> ConstPtr;

}; // struct JulyIntMsg_

typedef ::july_msgs::JulyIntMsg_<std::allocator<void> > JulyIntMsg;

typedef boost::shared_ptr< ::july_msgs::JulyIntMsg > JulyIntMsgPtr;
typedef boost::shared_ptr< ::july_msgs::JulyIntMsg const> JulyIntMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::july_msgs::JulyIntMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::july_msgs::JulyIntMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::july_msgs::JulyIntMsg_<ContainerAllocator1> & lhs, const ::july_msgs::JulyIntMsg_<ContainerAllocator2> & rhs)
{
  return lhs.msg_a == rhs.msg_a &&
    lhs.msg_b == rhs.msg_b;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::july_msgs::JulyIntMsg_<ContainerAllocator1> & lhs, const ::july_msgs::JulyIntMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace july_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::july_msgs::JulyIntMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::july_msgs::JulyIntMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::july_msgs::JulyIntMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::july_msgs::JulyIntMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::july_msgs::JulyIntMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::july_msgs::JulyIntMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::july_msgs::JulyIntMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d09a3f7a5a94e2671033e5fccab47e31";
  }

  static const char* value(const ::july_msgs::JulyIntMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd09a3f7a5a94e267ULL;
  static const uint64_t static_value2 = 0x1033e5fccab47e31ULL;
};

template<class ContainerAllocator>
struct DataType< ::july_msgs::JulyIntMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "july_msgs/JulyIntMsg";
  }

  static const char* value(const ::july_msgs::JulyIntMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::july_msgs::JulyIntMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 msg_a\n"
"int32 msg_b\n"
;
  }

  static const char* value(const ::july_msgs::JulyIntMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::july_msgs::JulyIntMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msg_a);
      stream.next(m.msg_b);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JulyIntMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::july_msgs::JulyIntMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::july_msgs::JulyIntMsg_<ContainerAllocator>& v)
  {
    s << indent << "msg_a: ";
    Printer<int32_t>::stream(s, indent + "  ", v.msg_a);
    s << indent << "msg_b: ";
    Printer<int32_t>::stream(s, indent + "  ", v.msg_b);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JULY_MSGS_MESSAGE_JULYINTMSG_H
